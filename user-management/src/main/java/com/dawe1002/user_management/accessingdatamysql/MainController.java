package com.dawe1002.user_management.accessingdatamysql;

import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/api/users") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;

  @PostMapping(path = "/login")
  public ResponseEntity<String> loginUser(@RequestBody Map<String, Object> body) {	  
	  String email = body.get("email").toString();
	  String password = body.get("password").toString();
	  
      // Benutzer anhand der E-Mail suchen
      Optional<User> optionalUser = userRepository.findByEmail(email);
      
      boolean success = optionalUser
    		  .filter(user -> password.equals(user.getPasswort()))
    		  .isPresent();
      if (success) {
          // TODO check password, respond with token
          return ResponseEntity.ok("Login erfolgreich!");
      } else {
          return ResponseEntity
        		  .status(HttpStatus.UNAUTHORIZED)
				  .body("Nutzername oder Passwort inkorrekt.");
      }
  }

  // TODO use @RequestBody to read POST data from body instead of URL params
  @PostMapping(path = "/register")
  public ResponseEntity<String> registerUser(@RequestBody Map<String, Object> body) {
	  String vorname = body.get("vorname").toString();
	  String nachname = body.get("nachname").toString();
	  String email = body.get("email").toString();
	  String password = body.get("password").toString();
    // @RequestParam means it is a parameter from the GET or POST request

    User n = new User();
    n.setVorname(vorname);
    n.setNachname(nachname);
    n.setEmail(email);
    n.setPasswort(password);
    try {
    	userRepository.save(n);
    	return ResponseEntity.ok("Registrierung erfolgreich!");
    } catch (DataIntegrityViolationException e) {
    	return ResponseEntity.status(HttpStatus.CONFLICT).body("Email-Adresse bereits vergeben");
    			//ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Registrierung fehlgeschlagen!");        
    }
}


  @GetMapping(path="/all")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
}